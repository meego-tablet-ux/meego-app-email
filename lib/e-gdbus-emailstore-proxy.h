/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -i dbustypes.h -p e-gdbus-emailstore-proxy /home/meego/git/evolution-data-server/mail/daemon/e-mail-data-store.xml org.gnome.evolution.dataserver.mail.Store
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef E_GDBUS_EMAILSTORE_PROXY_H_1302131674
#define E_GDBUS_EMAILSTORE_PROXY_H_1302131674  

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "dbustypes.h"

/*
 * Proxy class for interface org.gnome.evolution.dataserver.mail.Store
 */
class OrgGnomeEvolutionDataserverMailStoreInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.gnome.evolution.dataserver.mail.Store"; }

public:
    OrgGnomeEvolutionDataserverMailStoreInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgGnomeEvolutionDataserverMailStoreInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> canRefreshFolder(CamelFolderInfoArrayVariant info)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(info);
        return asyncCallWithArgumentList(QLatin1String("canRefreshFolder"), argumentList);
    }

    inline QDBusPendingReply<CamelFolderInfoArrayVariant> createFolder(const QString &parent_name, const QString &folder_name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(parent_name) << qVariantFromValue(folder_name);
        return asyncCallWithArgumentList(QLatin1String("createFolder"), argumentList);
    }

    inline QDBusPendingReply<bool> deleteFolder(const QString &folder_name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(folder_name);
        return asyncCallWithArgumentList(QLatin1String("deleteFolder"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> getFolder(const QString &full_name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(full_name);
        return asyncCallWithArgumentList(QLatin1String("getFolder"), argumentList);
    }

    inline QDBusPendingReply<CamelFolderInfoArrayVariant> getFolderInfo(const QString &full_name, uint flags)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(full_name) << qVariantFromValue(flags);
        return asyncCallWithArgumentList(QLatin1String("getFolderInfo"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> getInbox()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getInbox"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> getJunk()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getJunk"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> getTrash()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getTrash"), argumentList);
    }

    inline QDBusPendingReply<bool> isFolderSubscribed(const QString &folder_name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(folder_name);
        return asyncCallWithArgumentList(QLatin1String("isFolderSubscribed"), argumentList);
    }

    inline QDBusPendingReply<bool> noop()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("noop"), argumentList);
    }

    inline QDBusPendingReply<bool> renameFolder(const QString &old_folder_name, const QString &new_folder_name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(old_folder_name) << qVariantFromValue(new_folder_name);
        return asyncCallWithArgumentList(QLatin1String("renameFolder"), argumentList);
    }

    inline QDBusPendingReply<bool> subscribeFolder(const QString &folder_name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(folder_name);
        return asyncCallWithArgumentList(QLatin1String("subscribeFolder"), argumentList);
    }

    inline QDBusPendingReply<bool> supportsSubscriptions()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("supportsSubscriptions"), argumentList);
    }

    inline QDBusPendingReply<bool> sync(bool expunge)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(expunge);
        return asyncCallWithArgumentList(QLatin1String("sync"), argumentList);
    }

    inline QDBusPendingReply<bool> unsubscribeFolder(const QString &folder_name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(folder_name);
        return asyncCallWithArgumentList(QLatin1String("unsubscribeFolder"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void FolderCreated(CamelFolderInfoArrayVariant info);
    void FolderDeleted(CamelFolderInfoArrayVariant info);
    void FolderOpened(const QDBusObjectPath &folder);
    void FolderRenamed(const QString &old_name, CamelFolderInfoArrayVariant info);
    void FolderSubscribed(CamelFolderInfoArrayVariant info);
    void FolderUnsubscribed(CamelFolderInfoArrayVariant info);
};

namespace org {
  namespace gnome {
    namespace evolution {
      namespace dataserver {
        namespace mail {
          typedef ::OrgGnomeEvolutionDataserverMailStoreInterface Store;
        }
      }
    }
  }
}
#endif
